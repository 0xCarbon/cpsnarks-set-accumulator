var N=null,E="",T="t",U="u",searchIndex={};
var R=["accumulator","accerror","result","membershipproof","witness","nonmembershipproof","vcerror","vectorproof","This method is only public for benchmarking. You should…","integer","classelem","accumulator::hash","Panics if `m == 0`.","is_perfect_square","is_congruent","is_divisible_u","write_binary","Panics if `buf` is not large enough.","from_be_bytes","to_owned","clone_into","try_from","borrow_mut","try_into","type_id","borrow","typeid","accumulator::group","accumulator::proof","accumulator::uint","ristrettoelem","rsa2048elem","unknown_order_elem_","finalize","ordering","option","partial_cmp","vectorcommitment","classgroup","ristretto","formatter","Panics if result overflows.","Panics if result is negative.","add_assign","sub_assign","rem_assign","shl_assign","shr_assign","MembershipProof","AccError","Accumulator","VectorCommitment","ClassGroup","UnknownOrderGroup","ElemFrom","GeneralHasher","NonmembershipProof","VectorProof","ClassElem","RistrettoElem","Rsa2048Elem","Ristretto"];

searchIndex[R[0]]={"doc":"Fast cryptographic accumulator and vector commitment…","i":[[3,R[50],R[0],"A cryptographic accumulator. Wraps a single unknown-order…",N,N],[3,"Witness",E,"A witness to one or more values in an accumulator,…",N,N],[12,"0",E,E,0,N],[3,R[48],E,"A succinct proof of membership (some element is in some…",N,N],[12,R[4],E,"The witness for the element in question.",1,N],[3,R[56],E,"A succinct proof of nonmembership (some element is not in…",N,N],[3,R[51],E,"A vector commitment, wrapping an underlying accumulator.…",N,N],[3,R[57],E,"A vector commitment proof.",N,N],[4,R[49],E,"The different types of accumulator errors.",N,N],[13,"BadWitness",E,"Bad witness.",2,N],[13,"BadWitnessUpdate",E,"Error when updating a witness.",2,N],[13,"DivisionByZero",E,"Division by zero.",2,N],[13,"InexactDivision",E,"Inexact division where exact division was expected.",2,N],[13,"InputsNotCoprime",E,"Inputs not coprime when they were expected to be coprime.",2,N],[4,"VCError",E,"The different types of vector commitment errors.",N,N],[13,"ConflictingIndices",E,"When there are conflicting indices in the vector commitment.",3,N],[13,"InvalidOpen",E,"When an opening fails.",3,N],[13,"UnexpectedState",E,"Unexpected state during an update.",3,N],[11,"empty",E,"Returns a new, empty accumulator.",4,[[],["self"]]],[11,"add",E,"Adds `elems` to the accumulator. This cannot check whether…",4,[[],["self"]]],[11,"add_with_proof",E,"A specialized version of `add` that also returns a batch…",4,[[]]],[11,"delete",E,"Removes the elements in `elem_witnesses` from the…",4,[[],[[R[2],[R[1]]],[R[1]]]]],[11,"delete_with_proof",E,"A specialized version of `delete` that also returns a…",4,[[],[[R[2],[R[1]]],[R[1]]]]],[11,"prove_membership",E,"Computes the batch membership proof for the elements in…",4,[[["self"]],[[R[3]],[R[2],[R[3],R[1]]],[R[1]]]]],[11,"verify_membership",E,"Verifies a membership proof against the current…",4,[[[T],["self"],[R[3]]],["bool"]]],[11,"verify_membership_batch",E,"Batch version of `verify_membership` for multiple `elems`.",4,[[["self"],[R[3]]],["bool"]]],[11,"update_membership_witness",E,"Updates a `witness` for `tracked_elems` w.r.t the current…",4,[[["self"],[R[4]]],[[R[2],[R[4],R[1]]],[R[4]],[R[1]]]]],[11,"prove_nonmembership",E,"Computes the batch non-membership proof for the elements…",4,[[["self"]],[[R[2],[R[5],R[1]]],[R[5]],[R[1]]]]],[11,"verify_nonmembership",E,"Verifies a non-membership proof against the current…",4,[[[R[5]],["self"]],["bool"]]],[11,"compute_subset_witness",E,"Given a witness for `witness_set`, returns a witness for…",0,[[],[[R[2],[R[1]]],[R[1]]]]],[11,"compute_individual_witnesses",E,"Given a witness for many `elems`, computes a sub-witness…",0,[[["self"]],["vec"]]],[11,"empty",E,"Initializes a new vector commitment (VC).",5,[[],["self"]]],[11,"update",E,"Updates a VC with a list of values and indices.",5,[[],[[R[6]],[R[2],[R[6]]]]]],[11,"open",E,"Opens/generates a commitment to indices in the VC.",5,[[["self"]],[[R[6]],[R[2],[R[7],R[6]]],[R[7]]]]],[11,"verify",E,"Verifies a commitment to indices in the VC.",5,[[["self"],[R[7]]],["bool"]]],[0,"group",E,"Implementations for different mathematical groups, each of…",N,N],[3,R[58],R[27],"A class group element, which wraps three `Rug` integers.…",N,N],[3,R[59],E,"A Ristretto group element, directly wrapping a Ristretto…",N,N],[3,R[60],E,"An RSA 2048 group element, directly wrapping a `Rug`…",N,N],[4,R[52],E,"Class group implementation, with future optimizations…",N,N],[4,R[61],E,"Ristretto group implementation.",N,N],[4,"Rsa2048",E,"RSA-2048 group implementation. Modulus taken from here.",N,N],[5,"multi_exp",E,"Computes the product of `alpha_i ^ (p(x) / x_i)`, where…",N,[[]]],[11,"normalize",E,R[8],6,[[[R[9]]]]],[11,"reduce",E,R[8],6,[[[R[9]]]]],[11,"square",E,R[8],6,[[[R[10]]],[R[10]]]],[8,"Group",E,"A mathematical group.",N,N],[16,"Elem",E,"The associated group element type for this group.",7,N],[10,"id_",E,"A group-specific wrapper for `id`.",7,[[]]],[10,"op_",E,"A group-specific wrapper for `op`.",7,[[]]],[11,"exp_",E,"A group-specific wrapper for `exp`, although it comes with…",7,[[[R[9]]]]],[10,"inv_",E,"A group-specific wrapper for `inv`.",7,[[]]],[11,"id",E,"Returns the identity element of the group.",7,[[]]],[11,"op",E,"Applies the group operation to elements `a` and `b` and…",7,[[]]],[11,"exp",E,"Applies the group operation to `a` and itself `n` times…",7,[[[R[9]]]]],[11,"inv",E,"Returns the group inverse of `a`.",7,[[]]],[8,R[53],E,"A group containing elements of unknown order.",N,N],[11,"unknown_order_elem",E,"Returns an element of unknown order in the group.",8,[[]]],[10,R[32],E,"A group-specific wrapper for `unknown_order_elem`.",8,[[]]],[8,R[54],E,"Like `From<T>`, but implemented on the `Group` instead of…",N,N],[10,"elem",E,"Returns a group element from an initial value.",9,[[[T]]]],[0,"hash",R[0],"This module wraps `blake2b_rfc` into a convenient hashing…",N,N],[3,"Blake2b",R[11],"Thin wrapper around `Blake2b` from `blake2_rfc`.",N,N],[12,"0",E,E,10,N],[5,"hash",E,"Hash using the general Hasher.",N,[[[T],["fn"]]]],[5,"blake2b",E,"Calls `hash` with a Blake2b hasher.",N,[[[T]],[R[9]]]],[5,"hash_to_prime",E,"Hashes `t` to an odd prime.",N,[[[T]],[R[9]]]],[0,"primality",E,"Primality testing for U256 inputs. Use `is_prob_prime`…",N,N],[5,"is_prob_prime","accumulator::hash::primality","Implements the Baillie-PSW probabilistic primality test,…",N,[[["u256"]],["bool"]]],[5,"passes_miller_rabin_base_2",E,"A single iteration of the Miller-Rabin test (base-2 Fermat…",N,[[["u256"]],["bool"]]],[5,"passes_lucas",E,"Strong Lucas probable prime test (NOT the more common…",N,[[["u256"]],["bool"]]],[8,R[55],R[11],"Like `std::hash::Hasher`, but general over output type.",N,N],[16,"Output",E,"The associated output type of the Hasher.",11,N],[10,R[33],E,"Similar to `Hasher::finish`, but consumes `self`.",11,[[]]],[0,"proof",R[0],"Succinct proofs over unknown-order groups. These proofs…",N,N],[3,"Poe",R[28],"Struct for NI-PoE.",N,N],[3,"Pokcr",E,"Struct for NI-PoKCR.",N,N],[3,"Poke2",E,"Struct for NI-PoKE2.",N,N],[11,"prove",E,"Computes a proof that `base ^ exp` was performed to derive…",12,[[[R[9]]],["self"]]],[11,"verify",E,"Verifies that `base ^ exp = result` using the given proof…",12,[[[R[9]],["self"]],["bool"]]],[11,"prove",E,"Generates an NI-PoKCR proof.",13,[[],["self"]]],[11,"verify",E,"Verifies an NI-PoKCR proof.",13,[[["self"]],["bool"]]],[11,"prove",E,"Computes a proof that you know `exp` s.t. `base ^ exp =…",14,[[[R[9]]],["self"]]],[11,"verify",E,"Verifies that the prover knows `exp` s.t. `base ^ exp =…",14,[[["self"]],["bool"]]],[0,"uint",R[0],"Zero-allocation U256 and U512 types built on GMP. We…",N,N],[3,"U256",R[29],E,N,N],[3,"U512",E,E,N,N],[5,"u256",E,E,N,[[[T]],["u256"]]],[5,"u512",E,E,N,[[[T]],["u512"]]],[11,"zero",E,E,15,[[],["self"]]],[11,"is_zero",E,E,15,[[["self"]],["bool"]]],[11,"one",E,E,15,[[],["self"]]],[11,"is_odd",E,E,15,[[["self"]],["bool"]]],[11,"mod_inv",E,R[12],15,[[["self"]],[R[35]]]],[11,"pow_mod",E,R[12],15,[[["self"]],["self"]]],[11,R[13],E,E,15,[[["self"]],["bool"]]],[11,"jacobi",E,E,15,[[["i32"],["self"]],["i32"]]],[11,R[14],E,E,15,[[["i32"],["self"]],["bool"]]],[11,R[15],E,E,15,[[["self"],["u64"]],["bool"]]],[11,R[16],E,R[17],15,[[["self"]],["usize"]]],[11,R[18],E,E,15,[[],["self"]]],[11,"zero",E,E,16,[[],["self"]]],[11,"is_zero",E,E,16,[[["self"]],["bool"]]],[11,"one",E,E,16,[[],["self"]]],[11,"is_odd",E,E,16,[[["self"]],["bool"]]],[11,"mod_inv",E,R[12],16,[[["self"]],[R[35]]]],[11,"pow_mod",E,R[12],16,[[["self"]],["self"]]],[11,R[13],E,E,16,[[["self"]],["bool"]]],[11,"jacobi",E,E,16,[[["i32"],["self"]],["i32"]]],[11,R[14],E,E,16,[[["i32"],["self"]],["bool"]]],[11,R[15],E,E,16,[[["self"],["u64"]],["bool"]]],[11,R[16],E,R[17],16,[[["self"]],["usize"]]],[11,R[18],E,E,16,[[],["self"]]],[11,"low_u256",E,"Returns the lower half of this `U512` as a `U256`. TODO:…",16,[[],["u256"]]],[11,"remove_factor",E,"Returns (result of removing all `f`s, number of `f`s…",15,[[]]],[0,"util",R[0],"Miscellaneous functions used throughout the library.",N,N],[5,"int","accumulator::util","Convenience wrapper for creating `Rug` integers.",N,[[[T]],[R[9]]]],[5,"prime_hash_product",E,"Hashes its arguments to primes and takes their product.",N,[[],[R[9]]]],[5,"shamir_trick",E,"Computes the `(xy)`th root of `g` given the `x`th and…",N,[[[R[9]]],[R[35]]]],[5,"solve_linear_congruence",E,"Solves a linear congruence of form `ax = b mod m` for the…",N,[[[R[9]]],[R[35]]]],[5,"divide_and_conquer",E,"Folds over `xs` but in a divide-and-conquer fashion:…",N,[[["f"],["clone"]],[[R[2]],["clone"]]]],[8,"TypeRep",E,"Pseudo-type-level programming. This trait allows us to…",N,N],[16,"Rep",E,"The associated type of the simulated type-level static…",17,N],[10,"rep",E,"Returns the static data for the type.",17,[[]]],[11,R[19],R[0],E,4,[[["self"]],[T]]],[11,R[20],E,E,4,[[[T],["self"]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[21],E,E,4,[[[U]],[R[2]]]],[11,R[25],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[],[R[2]]]],[11,R[24],E,E,4,[[["self"]],[R[26]]]],[11,R[19],E,E,0,[[["self"]],[T]]],[11,R[20],E,E,0,[[[T],["self"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[21],E,E,0,[[[U]],[R[2]]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[],[R[2]]]],[11,R[24],E,E,0,[[["self"]],[R[26]]]],[11,R[19],E,E,1,[[["self"]],[T]]],[11,R[20],E,E,1,[[[T],["self"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[21],E,E,1,[[[U]],[R[2]]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[],[R[2]]]],[11,R[24],E,E,1,[[["self"]],[R[26]]]],[11,R[19],E,E,18,[[["self"]],[T]]],[11,R[20],E,E,18,[[[T],["self"]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[21],E,E,18,[[[U]],[R[2]]]],[11,R[25],E,E,18,[[["self"]],[T]]],[11,R[22],E,E,18,[[["self"]],[T]]],[11,R[23],E,E,18,[[],[R[2]]]],[11,R[24],E,E,18,[[["self"]],[R[26]]]],[11,R[19],E,E,5,[[["self"]],[T]]],[11,R[20],E,E,5,[[[T],["self"]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[21],E,E,5,[[[U]],[R[2]]]],[11,R[25],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[],[R[2]]]],[11,R[24],E,E,5,[[["self"]],[R[26]]]],[11,R[19],E,E,19,[[["self"]],[T]]],[11,R[20],E,E,19,[[[T],["self"]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[21],E,E,19,[[[U]],[R[2]]]],[11,R[25],E,E,19,[[["self"]],[T]]],[11,R[22],E,E,19,[[["self"]],[T]]],[11,R[23],E,E,19,[[],[R[2]]]],[11,R[24],E,E,19,[[["self"]],[R[26]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[21],E,E,2,[[[U]],[R[2]]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[],[R[2]]]],[11,R[24],E,E,2,[[["self"]],[R[26]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[21],E,E,3,[[[U]],[R[2]]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[],[R[2]]]],[11,R[24],E,E,3,[[["self"]],[R[26]]]],[11,R[19],R[27],E,20,[[["self"]],[T]]],[11,R[20],E,E,20,[[[T],["self"]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[21],E,E,20,[[[U]],[R[2]]]],[11,R[25],E,E,20,[[["self"]],[T]]],[11,R[22],E,E,20,[[["self"]],[T]]],[11,R[23],E,E,20,[[],[R[2]]]],[11,R[24],E,E,20,[[["self"]],[R[26]]]],[11,R[19],E,E,21,[[["self"]],[T]]],[11,R[20],E,E,21,[[[T],["self"]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[21],E,E,21,[[[U]],[R[2]]]],[11,R[25],E,E,21,[[["self"]],[T]]],[11,R[22],E,E,21,[[["self"]],[T]]],[11,R[23],E,E,21,[[],[R[2]]]],[11,R[24],E,E,21,[[["self"]],[R[26]]]],[11,R[19],E,E,22,[[["self"]],[T]]],[11,R[20],E,E,22,[[[T],["self"]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,"into",E,E,22,[[],[U]]],[11,R[21],E,E,22,[[[U]],[R[2]]]],[11,R[25],E,E,22,[[["self"]],[T]]],[11,R[22],E,E,22,[[["self"]],[T]]],[11,R[23],E,E,22,[[],[R[2]]]],[11,R[24],E,E,22,[[["self"]],[R[26]]]],[11,R[19],E,E,6,[[["self"]],[T]]],[11,R[20],E,E,6,[[[T],["self"]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[21],E,E,6,[[[U]],[R[2]]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[T]]],[11,R[23],E,E,6,[[],[R[2]]]],[11,R[24],E,E,6,[[["self"]],[R[26]]]],[11,R[19],E,E,23,[[["self"]],[T]]],[11,R[20],E,E,23,[[[T],["self"]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,R[21],E,E,23,[[[U]],[R[2]]]],[11,R[25],E,E,23,[[["self"]],[T]]],[11,R[22],E,E,23,[[["self"]],[T]]],[11,R[23],E,E,23,[[],[R[2]]]],[11,R[24],E,E,23,[[["self"]],[R[26]]]],[11,R[19],E,E,24,[[["self"]],[T]]],[11,R[20],E,E,24,[[[T],["self"]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,"into",E,E,24,[[],[U]]],[11,R[21],E,E,24,[[[U]],[R[2]]]],[11,R[25],E,E,24,[[["self"]],[T]]],[11,R[22],E,E,24,[[["self"]],[T]]],[11,R[23],E,E,24,[[],[R[2]]]],[11,R[24],E,E,24,[[["self"]],[R[26]]]],[11,"from",R[11],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[21],E,E,10,[[[U]],[R[2]]]],[11,R[25],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[T]]],[11,R[23],E,E,10,[[],[R[2]]]],[11,R[24],E,E,10,[[["self"]],[R[26]]]],[11,"clear",E,E,10,[[["self"]]]],[11,"initialize",E,E,10,[[]]],[11,R[19],R[28],E,12,[[["self"]],[T]]],[11,R[20],E,E,12,[[[T],["self"]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[21],E,E,12,[[[U]],[R[2]]]],[11,R[25],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[T]]],[11,R[23],E,E,12,[[],[R[2]]]],[11,R[24],E,E,12,[[["self"]],[R[26]]]],[11,R[19],E,E,13,[[["self"]],[T]]],[11,R[20],E,E,13,[[[T],["self"]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[21],E,E,13,[[[U]],[R[2]]]],[11,R[25],E,E,13,[[["self"]],[T]]],[11,R[22],E,E,13,[[["self"]],[T]]],[11,R[23],E,E,13,[[],[R[2]]]],[11,R[24],E,E,13,[[["self"]],[R[26]]]],[11,R[19],E,E,14,[[["self"]],[T]]],[11,R[20],E,E,14,[[[T],["self"]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[21],E,E,14,[[[U]],[R[2]]]],[11,R[25],E,E,14,[[["self"]],[T]]],[11,R[22],E,E,14,[[["self"]],[T]]],[11,R[23],E,E,14,[[],[R[2]]]],[11,R[24],E,E,14,[[["self"]],[R[26]]]],[11,R[19],R[29],E,15,[[["self"]],[T]]],[11,R[20],E,E,15,[[[T],["self"]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[21],E,E,15,[[[U]],[R[2]]]],[11,R[25],E,E,15,[[["self"]],[T]]],[11,R[22],E,E,15,[[["self"]],[T]]],[11,R[23],E,E,15,[[],[R[2]]]],[11,R[24],E,E,15,[[["self"]],[R[26]]]],[11,R[19],E,E,16,[[["self"]],[T]]],[11,R[20],E,E,16,[[[T],["self"]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[21],E,E,16,[[[U]],[R[2]]]],[11,R[25],E,E,16,[[["self"]],[T]]],[11,R[22],E,E,16,[[["self"]],[T]]],[11,R[23],E,E,16,[[],[R[2]]]],[11,R[24],E,E,16,[[["self"]],[R[26]]]],[11,"op_",R[27],E,6,[[[R[9]],[R[10]]],[R[10]]]],[11,"id_",E,E,6,[[[R[9]]],[R[10]]]],[11,"inv_",E,E,6,[[[R[9]],[R[10]]],[R[10]]]],[11,"exp_",E,E,6,[[[R[9]],[R[10]]],[R[10]]]],[11,"op_",E,E,23,[[[R[30]]],[R[30]]]],[11,"id_",E,E,23,[[],[R[30]]]],[11,"inv_",E,E,23,[[[R[30]]],[R[30]]]],[11,"exp_",E,E,23,[[[R[30]],[R[9]]],[R[30]]]],[11,"op_",E,E,24,[[[R[9]],[R[31]]],[R[31]]]],[11,"id_",E,E,24,[[[R[9]]],[R[31]]]],[11,"inv_",E,E,24,[[[R[9]],[R[31]]],[R[31]]]],[11,"exp_",E,E,24,[[[R[9]],[R[31]]],[R[31]]]],[11,R[32],E,E,6,[[[R[9]]],[R[10]]]],[11,R[32],E,E,24,[[[R[9]]],[R[31]]]],[11,"elem",E,E,6,[[],[R[10]]]],[11,"elem",E,E,24,[[[T]],[R[31]]]],[11,R[33],R[11],E,10,[[]]],[11,"rep",R[27],E,6,[[]]],[11,"rep",E,E,23,[[]]],[11,"rep",E,E,24,[[]]],[11,"clone",R[0],E,4,[[["self"]],["self"]]],[11,"clone",E,E,0,[[["self"]],[R[4]]]],[11,"clone",E,E,1,[[["self"]],[R[3]]]],[11,"clone",E,E,18,[[["self"]],[R[5]]]],[11,"clone",E,E,5,[[["self"]],[R[37]]]],[11,"clone",E,E,19,[[["self"]],[R[7]]]],[11,"clone",R[27],E,6,[[["self"]],[R[38]]]],[11,"clone",E,E,20,[[["self"]],[R[10]]]],[11,"clone",E,E,23,[[["self"]],[R[39]]]],[11,"clone",E,E,21,[[["self"]],[R[30]]]],[11,"clone",E,E,24,[[["self"]],["rsa2048"]]],[11,"clone",E,E,22,[[["self"]],[R[31]]]],[11,"clone",R[28],E,12,[[["self"]],["poe"]]],[11,"clone",E,E,13,[[["self"]],["pokcr"]]],[11,"clone",E,E,14,[[["self"]],["poke2"]]],[11,"clone",R[29],E,15,[[["self"]],["u256"]]],[11,"clone",E,E,16,[[["self"]],["u512"]]],[11,"cmp",E,E,15,[[["self"]],[R[34]]]],[11,"cmp",E,E,16,[[["self"]],[R[34]]]],[11,R[36],E,E,15,[[["self"]],[[R[34]],[R[35],[R[34]]]]]],[11,R[36],E,E,16,[[["self"]],[[R[34]],[R[35],[R[34]]]]]],[11,"default",R[11],E,10,[[],["self"]]],[11,"eq",R[0],E,4,[[[R[0]],["self"]],["bool"]]],[11,"ne",E,E,4,[[[R[0]],["self"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[4]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[3]]],["bool"]]],[11,"eq",E,E,18,[[[R[5]],["self"]],["bool"]]],[11,"ne",E,E,18,[[[R[5]],["self"]],["bool"]]],[11,"eq",E,E,5,[[[R[37]],["self"]],["bool"]]],[11,"ne",E,E,5,[[[R[37]],["self"]],["bool"]]],[11,"eq",E,E,19,[[["self"],[R[7]]],["bool"]]],[11,"ne",E,E,19,[[["self"],[R[7]]],["bool"]]],[11,"eq",R[27],E,6,[[[R[38]],["self"]],["bool"]]],[11,"eq",E,E,20,[[["self"]],["bool"]]],[11,"eq",E,E,23,[[[R[39]],["self"]],["bool"]]],[11,"eq",E,E,21,[[[R[30]],["self"]],["bool"]]],[11,"ne",E,E,21,[[[R[30]],["self"]],["bool"]]],[11,"eq",E,E,24,[[["rsa2048"],["self"]],["bool"]]],[11,"eq",E,E,22,[[["self"],[R[31]]],["bool"]]],[11,"ne",E,E,22,[[["self"],[R[31]]],["bool"]]],[11,"eq",R[28],E,12,[[["poe"],["self"]],["bool"]]],[11,"ne",E,E,12,[[["poe"],["self"]],["bool"]]],[11,"eq",E,E,13,[[["self"],["pokcr"]],["bool"]]],[11,"ne",E,E,13,[[["self"],["pokcr"]],["bool"]]],[11,"eq",E,E,14,[[["self"],["poke2"]],["bool"]]],[11,"ne",E,E,14,[[["self"],["poke2"]],["bool"]]],[11,"eq",R[29],E,15,[[["u256"],["self"]],["bool"]]],[11,"ne",E,E,15,[[["u256"],["self"]],["bool"]]],[11,"eq",E,E,15,[[["u64"],["self"]],["bool"]]],[11,"eq",E,E,16,[[["u512"],["self"]],["bool"]]],[11,"ne",E,E,16,[[["u512"],["self"]],["bool"]]],[11,"eq",E,E,16,[[["u64"],["self"]],["bool"]]],[11,"from",R[0],E,4,[[],["self"]]],[11,"from",R[29],E,15,[[],["self"]]],[11,"from",E,E,15,[[["u64"]],["self"]]],[11,"from",E,E,15,[[],["self"]]],[11,"from",E,E,15,[[],["self"]]],[11,"from",E,E,16,[[],["self"]]],[11,"from",E,E,16,[[["u64"]],["self"]]],[11,"from",E,E,16,[[],["self"]]],[11,"from",E,E,16,[[],["self"]]],[11,"from",E,E,16,[[["u256"]],["self"]]],[11,"from",E,E,16,[[["u256"]],["self"]]],[11,"fmt",R[0],E,2,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,4,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,0,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,1,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,18,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,3,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,5,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,19,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",R[27],E,6,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,20,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,23,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,21,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,24,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,22,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",R[28],E,12,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,13,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,14,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",R[29],E,15,[[[R[40]],["self"]],[R[2]]]],[11,"fmt",E,E,16,[[[R[40]],["self"]],[R[2]]]],[11,"add",E,E,15,[[],["self"]]],[11,"add",E,R[41],15,[[["u64"]],["self"]]],[11,"add",E,E,16,[[],["self"]]],[11,"add",E,R[41],16,[[["u64"]],["self"]]],[11,"sub",E,R[42],15,[[],["self"]]],[11,"sub",E,R[42],15,[[["u64"]],["self"]]],[11,"sub",E,R[42],16,[[],["self"]]],[11,"sub",E,R[42],16,[[["u64"]],["self"]]],[11,"mul",E,E,15,[[["self"]],["u512"]]],[11,"mul",E,E,15,[[],["u512"]]],[11,"div",E,E,15,[[["self"]],["self"]]],[11,"div",E,E,15,[[],["self"]]],[11,"div",E,E,16,[[["self"]],["self"]]],[11,"div",E,E,16,[[],["self"]]],[11,"rem",E,E,15,[[["self"]],["self"]]],[11,"rem",E,E,15,[[],["self"]]],[11,"rem",E,E,16,[[["self"]],["self"]]],[11,"rem",E,E,16,[[],["self"]]],[11,"rem",E,E,16,[[["u256"]],["u256"]]],[11,"rem",E,E,16,[[["u256"]],["u256"]]],[11,R[43],E,R[41],15,[[["self"]]]],[11,R[43],E,R[41],16,[[["self"]]]],[11,R[44],E,R[42],15,[[["self"]]]],[11,R[44],E,R[42],16,[[["self"]]]],[11,R[45],E,E,15,[[["self"],["self"]]]],[11,R[45],E,E,15,[[["self"]]]],[11,R[45],E,E,16,[[["self"],["self"]]]],[11,R[45],E,E,16,[[["self"]]]],[11,"shl",E,E,15,[[["u32"]],["self"]]],[11,"shl",E,E,16,[[["u32"]],["self"]]],[11,"shr",E,E,15,[[["u32"]],["self"]]],[11,"shr",E,E,16,[[["u32"]],["self"]]],[11,R[46],E,E,15,[[["u32"],["self"]]]],[11,R[46],E,E,16,[[["u32"],["self"]]]],[11,R[47],E,E,15,[[["u32"],["self"]]]],[11,R[47],E,E,16,[[["u32"],["self"]]]],[11,"hash",R[0],E,4,[[["__hgt"],["self"]]]],[11,"hash",E,E,0,[[["__hgt"],["self"]]]],[11,"hash",E,E,1,[[["__hgt"],["self"]]]],[11,"hash",E,E,18,[[["__hgt"],["self"]]]],[11,"hash",E,E,5,[[["__hg"],["self"]]]],[11,"hash",E,E,19,[[["__hg"],["self"]]]],[11,"hash",R[27],E,6,[[["self"],["__h"]]]],[11,"hash",E,E,20,[[["h"],["self"]]]],[11,"hash",E,E,23,[[["self"],["__h"]]]],[11,"hash",E,E,21,[[["h"],["self"]]]],[11,"hash",E,E,24,[[["self"],["__h"]]]],[11,"hash",E,E,22,[[["self"],["__h"]]]],[11,"hash",R[28],E,12,[[["__hg"],["self"]]]],[11,"hash",E,E,13,[[["__hg"],["self"]]]],[11,"hash",E,E,14,[[["__hg"],["self"]]]],[11,"hash",R[29],E,15,[[["self"],["__h"]]]],[11,"hash",E,E,16,[[["self"],["__h"]]]],[11,"finish",R[11],"We could return a truncated hash but it's easier just to…",10,[[["self"]],["u64"]]],[11,"write",E,E,10,[[["self"]]]]],"p":[[3,"Witness"],[3,R[48]],[4,R[49]],[4,"VCError"],[3,R[50]],[3,R[51]],[4,R[52]],[8,"Group"],[8,R[53]],[8,R[54]],[3,"Blake2b"],[8,R[55]],[3,"Poe"],[3,"Pokcr"],[3,"Poke2"],[3,"U256"],[3,"U512"],[8,"TypeRep"],[3,R[56]],[3,R[57]],[3,R[58]],[3,R[59]],[3,R[60]],[4,R[61]],[4,"Rsa2048"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);